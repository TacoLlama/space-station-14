using System.Linq;
using System.Numerics;
using Content.Shared.VendingMachines;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Robust.Client.UserInterface;
using Content.Client.UserInterface.Controls;
using Content.Shared.IdentityManagement;
using Robust.Client.Graphics;
using Robust.Shared.Utility;

namespace Content.Client.VendingMachines.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class VendingMachineMenu : FancyWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;

        private readonly Dictionary<EntProtoId, EntityUid> _dummies = [];
         // ðŸŒŸStarlight startðŸŒŸ
        private readonly Dictionary<EntProtoId, (ListContainerButton Button, VendingMachineItem Item)> _listItems = new();
        private readonly Dictionary<EntProtoId, uint> _amounts = new(); 
        private readonly Dictionary<EntProtoId, int> _prices = new(); 
         // ðŸŒŸStarlight endðŸŒŸ

        /// <summary>
        /// Whether the vending machine is able to be interacted with or not.
        /// </summary>
        private bool _enabled; // ðŸŒŸStarlightðŸŒŸ
        private bool _showPrices; // ðŸŒŸStarlightðŸŒŸ

        public event Action<GUIBoundKeyEventArgs, ListData>? OnItemSelected;

        // ðŸŒŸStarlightðŸŒŸ start

        /// <summary>
        /// Updates the balance display
        /// </summary>
        /// <param name="balance">Current player balance</param>
        public void UpdateBalance(int balance) => BalanceLabel.Text = $"Balance: {balance}â‚¡";
        
        /// <summary>
        /// Toggles the balance display
        /// </summary>
         public void ToggleBalance(bool? enable = null) => BalanceContainer.Visible = enable ?? !BalanceContainer.Visible;
        // ðŸŒŸStarlightðŸŒŸ end

        public VendingMachineMenu()
        {
            MinSize = SetSize = new Vector2(250, 150);
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            VendingContents.SearchBar = SearchBar;
            VendingContents.DataFilterCondition += DataFilterCondition;
            VendingContents.GenerateItem += GenerateButton;
            VendingContents.ItemKeyBindDown += (args, data) => OnItemSelected?.Invoke(args, data);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            // Don't clean up dummies during disposal or we'll just have to spawn them again
            if (!disposing)
                return;

            // Delete any dummy items we spawned
            foreach (var entity in _dummies.Values)
            {
                _entityManager.QueueDeleteEntity(entity);
            }
            _dummies.Clear();
        }

        private bool DataFilterCondition(string filter, ListData data)
        {
            if (data is not VendorItemsListData { ItemText: var text })
                return false;

            if (string.IsNullOrEmpty(filter))
                return true;

            return text.Contains(filter, StringComparison.CurrentCultureIgnoreCase);
        }

        private void GenerateButton(ListData data, ListContainerButton button)
        {
            if (data is not VendorItemsListData { ItemProtoID: var protoID, ItemText: var text } vendorListData)
                return;

            // ðŸŒŸStarlightðŸŒŸ start
            _dummies.TryGetValue(protoID, out var dummy);
            var itemName = dummy != default ? Identity.Name(dummy, _entityManager) : text;
            var amount = vendorListData.Amount;
            var price = vendorListData.Price;

            var item = new VendingMachineItem(protoID, itemName, amount, price, _showPrices);
            // ðŸŒŸStarlightðŸŒŸ end
            
            _listItems[protoID] = (button, item);

            button.AddChild(item);
            button.AddStyleClass("ButtonSquare");

            button.Disabled = !_enabled || amount == 0; // ðŸŒŸStarlightðŸŒŸ
        }

        /// <summary>
        /// Populates the list of available items on the vending machine interface
        /// and sets icons based on their prototypes
        /// </summary>
        public void Populate(List<VendingMachineInventoryEntry> inventory, bool enabled, bool showPrices = true) // ðŸŒŸStarlightðŸŒŸ
        {
            _enabled = enabled;
            // ðŸŒŸStarlightðŸŒŸ start
            _showPrices = showPrices; 
            _listItems.Clear();
             _prices.Clear(); 
            // ðŸŒŸStarlightðŸŒŸ end
            _amounts.Clear();

            if (inventory.Count == 0 && VendingContents.Visible)
            {
                SearchBar.Visible = false;
                VendingContents.Visible = false;

                var outOfStockLabel = new Label()
                {
                    Text = Loc.GetString("vending-machine-component-try-eject-out-of-stock"),
                    Margin = new Thickness(4, 4),
                    HorizontalExpand = true,
                    VerticalAlignment = VAlignment.Stretch,
                    HorizontalAlignment = HAlignment.Center
                };

                MainContainer.AddChild(outOfStockLabel);

                SetSizeAfterUpdate(outOfStockLabel.Text.Length, 0);

                return;
            }

            var longestEntry = string.Empty;
            var listData = new List<VendorItemsListData>();

            for (var i = 0; i < inventory.Count; i++)
            {
                var entry = inventory[i];

                if (!_prototypeManager.TryIndex(entry.ID, out var prototype))
                {
                    _amounts[entry.ID] = 0;
                    continue;
                }

                if (!_dummies.TryGetValue(entry.ID, out var dummy))
                {
                    dummy = _entityManager.Spawn(entry.ID);
                    _dummies.Add(entry.ID, dummy);
                }

                var itemName = Identity.Name(dummy, _entityManager);
                //ðŸŒŸStarlightðŸŒŸ start
                var itemText = showPrices && entry.Price > 0 ? 
                    $"{itemName} [{entry.Amount}] - {entry.Price} â‚¡" : 
                    $"{itemName} [{entry.Amount}]";
                //ðŸŒŸStarlightðŸŒŸ end
                _amounts[entry.ID] = entry.Amount;
                _prices[entry.ID] = entry.Price; // ðŸŒŸStgarlightðŸŒŸ

                if (itemText.Length > longestEntry.Length)
                    longestEntry = itemText;

                listData.Add(new VendorItemsListData(prototype.ID, i)
                {
                    ItemText = itemText,
                    Amount = entry.Amount,
                    Price = entry.Price, // ðŸŒŸStarlightðŸŒŸ
                });
            }

            VendingContents.PopulateList(listData);

            SetSizeAfterUpdate(longestEntry.Length, inventory.Count);
        }

        /// <summary>
        /// Updates text entries for vending data in place without modifying the list controls.
        /// </summary>
        public void UpdateAmounts(List<VendingMachineInventoryEntry> cachedInventory, bool enabled, bool showPrices = true) // ðŸŒŸStarlightðŸŒŸ
        {
            _enabled = enabled;
            _showPrices = showPrices; // ðŸŒŸStarlightðŸŒŸ

            foreach (var proto in _dummies.Keys)
            {
                if (!_listItems.TryGetValue(proto, out var button))
                    continue;

                var dummy = _dummies[proto];
                if (!cachedInventory.TryFirstOrDefault(o => o.ID == proto, out var entry))
                    continue;
                var amount = entry.Amount;
                // ðŸŒŸStarlightðŸŒŸ start
                _amounts[proto] = amount;
                _prices[proto] = entry.Price;

                button.Item.SetAmount(amount);
                button.Item.SetPrice(entry.Price, showPrices);
                // ðŸŒŸStarlightðŸŒŸ end
                button.Button.Disabled = !enabled || amount == 0;
            }
        }

        private string GetItemText(EntityUid dummy, uint amount, int price, bool showPrices = true) // ðŸŒŸStarlightðŸŒŸ 
        {
            var itemName = Identity.Name(dummy, _entityManager); // ðŸŒŸStarlightðŸŒŸ
            return showPrices && price > 0 ? 
                $"{itemName} [{amount}] - {price} â‚¡" : 
                $"{itemName} [{amount}]"; 
        }

        private void SetSizeAfterUpdate(int longestEntryLength, int contentCount)
        {
            SetSize = new Vector2(Math.Clamp((longestEntryLength + 2) * 12, 250, 400),
                Math.Clamp(contentCount * 50, 150, 350));
        }
    }

    public record VendorItemsListData(EntProtoId ItemProtoID, int ItemIndex) : ListData
    {
        public string ItemText = string.Empty;
        public uint Amount; // ðŸŒŸStarlightðŸŒŸ
        public int Price; // ðŸŒŸStarlightðŸŒŸ
    }
}
