// Starlight
using System.Linq;
using Content.Shared.Humanoid;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Humanoid;

[GenerateTypedNameReferences]
public sealed partial class CyberneticsPicker : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly SpriteSystem _sprite;

    private ItemList.Item? _selectedAvailableCybernetics;
    private ItemList.Item? _selectedInstalledCybernetics;

    private readonly List<CyberneticImplant> CollectionAllCybernetics = []; 
    private List<CyberneticImplant> CollectionInstalledCybernetics = [];
    private readonly Dictionary<string, SpriteSpecifier.Rsi> CollectionAllIcons = [];

    public Action<List<CyberneticImplant>>? OnCyberneticsUpdated;
    private int CyberneticsMaxPoints = 0;
    private int CurrentPoints {
        get {
            int points = 0;
            foreach (var part in CollectionInstalledCybernetics){
                points += part.Cost;
            }
            return points;
        }
    }

    public CyberneticsPicker()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entityManager.System<SpriteSystem>();

        AvailableCybernetics.OnItemSelected += item => 
            _selectedAvailableCybernetics = AvailableCybernetics[item.ItemIndex];
        InstalledCybernetics.OnItemSelected += item => 
            _selectedInstalledCybernetics = InstalledCybernetics[item.ItemIndex];

        Install.OnPressed += _ =>
            InstallCybernetics();
        Remove.OnPressed += _ =>
            RemoveCybernetics();

        CollectionAllCybernetics = CyberneticImplant.GetAllCybernetics(_prototypeManager);
        CollectionAllIcons = GetIconsList();

        PopulateUI();
    }

    // On any state update full state is sent and entire UI is rebuilt
    public void SetData(List<string> cyberneticIds, int maxPoints = 0) {
        CollectionInstalledCybernetics = CollectionAllCybernetics.Where(p => cyberneticIds.Contains(p.ID)).ToList();
        CyberneticsMaxPoints = maxPoints;
        PopulateUI();
    }

    private Dictionary<string, SpriteSpecifier.Rsi> GetIconsList() {
        return CollectionAllCybernetics.ToDictionary(
            p => p.ID,
            p => {
                if (_prototypeManager.Index(p.ID).Components.TryGetValue("Icon", out var icon) && icon.Component is IconComponent iconComp){
                    return iconComp.Icon;
                } else {
                    return new SpriteSpecifier.Rsi(new ResPath("Textures/Objects/Fun/bikehorn.rsi"), "icon");
                }
            }
        );
    }

    // Installs parts, also installs attached parts
    private void InstallPart(CyberneticImplant part){
        CollectionInstalledCybernetics.Add(part);
        foreach (var attachedPart in part.AttachedParts){
            CyberneticImplant attachedImplant = CollectionAllCybernetics.Where(p => p.ID == attachedPart).FirstOrDefault(new CyberneticImplant{ID="broken"});
            if (attachedImplant.ID != "broken"){
                InstallPart(attachedImplant);
            }
        }
    }

    // Removes parts, but not if it's a part that was attached by other part
    private void RemovePart(CyberneticImplant part){
        if (CollectionInstalledCybernetics.Where(p => p.AttachedParts.Contains(part.ID)).Any()){
            return;
        }

        CollectionInstalledCybernetics.Remove(part);

        foreach (var attachedPart in part.AttachedParts){
            CyberneticImplant attachedImplant = CollectionAllCybernetics.Where(p => p.ID == attachedPart).FirstOrDefault(new CyberneticImplant{ID="broken"});
            if (attachedImplant.ID != "broken"){
                RemovePart(attachedImplant);
            }
        }
    }

    private int CalculateCost(CyberneticImplant part) {
        int cost = part.Cost;
        foreach (var attachedPart in part.AttachedParts){
            CyberneticImplant attachedImplant = CollectionAllCybernetics.Where(p => p.ID == attachedPart).FirstOrDefault(new CyberneticImplant{ID="broken"});
            if (attachedImplant.ID != "broken"){
                cost += CalculateCost(attachedImplant);
            }
        }
        return cost;
    }

    // Install button clicked, install selected part
    private void InstallCybernetics() {
        if (_selectedAvailableCybernetics is null || _selectedAvailableCybernetics.Metadata is not CyberneticImplant selectedImplant){
            return;
        }
        if (CurrentPoints + CalculateCost(selectedImplant) <= CyberneticsMaxPoints){
            InstallPart(selectedImplant);
        }
        PopulateUI();
        OnCyberneticsUpdated?.Invoke(CollectionInstalledCybernetics);
    }

    // Remove button clicked, remove selected part
    private void RemoveCybernetics() {
        if (_selectedInstalledCybernetics is null || _selectedInstalledCybernetics.Metadata is not CyberneticImplant selectedImplant){
            return;
        }
        RemovePart(selectedImplant);
        PopulateUI();
        OnCyberneticsUpdated?.Invoke(CollectionInstalledCybernetics);
    }

    // Build full UI from scratch
    public void PopulateUI()
    {
        AvailableCybernetics.Clear();
        InstalledCybernetics.Clear();
        _selectedAvailableCybernetics = null;
        _selectedInstalledCybernetics = null;

        foreach (var part in CollectionAllCybernetics) {
            if (!CollectionInstalledCybernetics.Contains(part)){
                var item = AvailableCybernetics.AddItem($"{part.Name}", _sprite.Frame0(CollectionAllIcons[part.ID]));
                item.Metadata = part;
            }
        }

        foreach (var part in CollectionInstalledCybernetics) {
            var item = InstalledCybernetics.AddItem($"{part.Name}", _sprite.Frame0(CollectionAllIcons[part.ID]));
            item.Metadata = part;
        }

        CyberneticsPoints.Text = Loc.GetString("cybernetics-points-remaining", ("points", CyberneticsMaxPoints - CurrentPoints), ("points_total", CyberneticsMaxPoints));
    }
}
