using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared.Access;

namespace Content.Client._Starlight.Access.UI;

[GenerateTypedNameReferences]
public sealed partial class AccessGroupControl : GridContainer
{
    [Dependency] private readonly ILogManager _logManager = default!;

    private ISawmill _sawmill = default!;

    public readonly Dictionary<ProtoId<AccessGroupPrototype>, Button> ButtonsList = new();

    public AccessGroupControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sawmill = _logManager.GetSawmill("accessgroupcontrol");
    }

    public void Populate(List<ProtoId<AccessGroupPrototype>> accessGroups, ProtoId<AccessGroupPrototype> selectedGroup, IPrototypeManager prototypeManager)
    {
        RemoveAllChildren();
        ButtonsList.Clear();

        if (accessGroups.Count == 0)
            return;

        foreach (var groupId in accessGroups)
        {
            if (!prototypeManager.TryIndex(groupId, out var groupPrototype))
            {
                _sawmill.Error($"Unable to find access group for {groupId}");
                continue;
            }

            var newButton = new Button
            {
                Text = groupPrototype.GetAccessGroupName(),
                ToggleMode = true,
                Pressed = groupId == selectedGroup,
            };
            AddChild(newButton);
            ButtonsList.Add(groupId, newButton);
        }
    }
}