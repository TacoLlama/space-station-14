using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared.Access;
using Robust.Client.UserInterface;

namespace Content.Client._Starlight.Access.UI;

[GenerateTypedNameReferences]
public sealed partial class AccessGroupControl : BoxContainer
{
    [Dependency] private readonly ILogManager _logManager = default!;

    private readonly ISawmill _sawmill = default!;

    public readonly Dictionary<ProtoId<AccessGroupPrototype>, Button> ButtonsList = new();

    public AccessGroupControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sawmill = _logManager.GetSawmill("accessgroupcontrol");
    }

    public void Populate(List<ProtoId<AccessGroupPrototype>> accessGroups, IPrototypeManager prototypeManager)
    {
        foreach (var group in accessGroups)
        {
            if (!prototypeManager.TryIndex(group, out var accessGroup))
            {
                _sawmill.Error($"Unable to find accessgroup for {group}");
                continue;
            }

            var newButton = new Button
            {
                Text = accessGroup.Name ?? accessGroup.ID
            };
            AddChild(newButton);
            ButtonsList.Add(accessGroup.ID, newButton);
        }
    }

    public void UpdateState(ProtoId<AccessGroupPrototype> pressed)
    {
        foreach (var (groupName, button) in ButtonsList)
            button.Disabled = pressed == groupName;
    }
}