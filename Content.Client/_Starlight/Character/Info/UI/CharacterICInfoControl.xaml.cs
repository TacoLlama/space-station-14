using Content.Client.CharacterInfo;
using Content.Shared._Starlight.Character.Info;
using Content.Shared._Starlight.Character.Info.Components;
using Content.Shared.Mind;
using Content.Shared.Roles.Jobs;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Starlight.Character.Info.UI;

[GenerateTypedNameReferences]
public sealed partial class CharacterICInfoControl : Control
{
    public CharacterICInfoControl()
    {
        RobustXamlLoader.Load(this);
    }

    public void SetCharacter(EntityUid? target, IEntityManager entityManager, EntityUid viewer)
    {
        if (!target.HasValue)
        {
            ClearCharacter();
            return;
        }

        var mind = entityManager.System<SharedMindSystem>().GetMind(target.Value);

        CharacterView.SetCharacter(target,
            entityManager.System<SharedJobSystem>().MindTryGetJobName(mind, out var jobName)
                ? jobName
                : string.Empty,
            viewer);
        string? desc = null;
        if (entityManager.TryGetComponent(target.Value, out CharacterDescriptionComponent? charDesc))
        {
            desc += charDesc.Description;
        }

        if (mind.HasValue && entityManager.TryGetComponent(mind.Value, out CharacterDescriptionComponent? mindDesc))
        {
            if (desc is { Length: > 0 })
                desc += "\n";
            desc += mindDesc.Description;
        }

        CharacterDesc.Text = desc;

        string? exploitableInfo = null;
        if (entityManager.TryGetComponent(target.Value, out ExploitableInfoComponent? exploitable)
            && entityManager.System<SLSharedCharacterInfoSystem>().CanAccessExploitableData(target.Value,viewer))
        {
                exploitableInfo = exploitable.Info;
        }
        ExploitableInfo.Text = exploitableInfo;
        string? secrets = null;
        if (entityManager.System<SLSharedCharacterInfoSystem>().CanAccessSecretData(target.Value,viewer)
            && entityManager.TryGetComponent(target.Value, out CharacterSecretsComponent? secretsComponent))
        {
            secrets = secretsComponent.Secrets;
        }

        SecretsInfo.Text = secrets;

        Secrets.Visible = secrets != null;
        Exploitable.Visible = exploitableInfo != null;
        HiddenInfoSection.Visible = exploitableInfo != null || secrets != null;
    }

    public void ClearCharacter()
    {
        CharacterView.ClearCharacter();
        CharacterDesc.Text = null;
        ExploitableInfo.Text = null;
        SecretsInfo.Text = null;
        Exploitable.Visible = false;
        Secrets.Visible = false;
        HiddenInfoSection.Visible = false;
    }
}