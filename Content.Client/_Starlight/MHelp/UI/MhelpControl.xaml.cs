using Content.Client.Administration.Managers;
using Content.Client.UserInterface.Systems.Bwoink;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Starlight.MHelp.UI;

[GenerateTypedNameReferences]
public sealed partial class MhelpControl : Control
{
    [Dependency] private readonly IClientAdminManager _adminManager = default!;
    [Dependency] private readonly IUserInterfaceManager _ui = default!;
    public MentorMHelpUIHandler MHelpHelper = default!;

    private Guid? _currentTicket;

    public MhelpControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var uiController = _ui.GetUIController<MHelpUIController>();
        if (uiController.UIHelper is not MentorMHelpUIHandler helper)
            return;

        MHelpHelper = helper;

        _adminManager.AdminStatusUpdated += UpdateButtons;
        UpdateButtons();

        TicketSelector.OnSelectionChanged += ticket =>
        {
            _currentTicket = ticket;
            SwitchToTicket(ticket);
            TicketSelector.TicketListContainer.DirtyList();
        };

        TicketSelector.Comparison = (a, b) =>
        {
            var ach = MHelpHelper.EnsurePanel(a.Id);
            var bch = MHelpHelper.EnsurePanel(b.Id);

            // Pinned players first
            if (a.IsPinned != b.IsPinned)
                return a.IsPinned ? -1 : 1;

            // First, sort by unread. Any chat with unread messages appears first.
            var aUnread = ach.Unread > 0;
            var bUnread = bch.Unread > 0;
            if (aUnread != bUnread)
                return aUnread ? -1 : 1;

            // Sort by recent messages during the current round.
            var aRecent = ach.LastMessage != DateTime.MinValue;
            var bRecent = bch.LastMessage != DateTime.MinValue;
            if (aRecent != bRecent)
                return aRecent ? -1 : 1;

            // Finally, sort by the most recent message.
            return bch.LastMessage.CompareTo(ach.LastMessage);
        };
    }

    public void SelectTicket(Guid ticketId)
    {                                    
        if (!TicketSelector.TryGetTicket(ticketId, out var ticket))
            return;

        TicketSelector.UpdateList();
        TicketSelector.TicketListContainer.Select(ticket);
    }

    public void UpdateButtons()
    {
        var disabled = _currentTicket == null;

    }

    private void SwitchToTicket(Guid? ticket)
    {
        UpdateButtons();

        MHelpHelper.HideAllPanels();
        if (ticket != null)
        {
            var panel = MHelpHelper.EnsurePanel(ticket.Value);
            panel.Visible = true;
        }
    }
    public void UpdateTicketList() =>
        TicketSelector.UpdateList();
    public void EnsureTicket(Guid ticketId, string title, bool ticketClosed) =>
        TicketSelector.EnsureTicket(ticketId, title, ticketClosed);
    public void UpdateList()
    {
        TicketSelector.UpdateList();
        UpdateButtons();
    }
}
