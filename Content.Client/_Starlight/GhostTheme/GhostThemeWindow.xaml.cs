using System.Linq;
using System.Numerics;
using Content.Client.Lobby;
using Content.Client.Lobby.UI;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Content.Shared.Starlight.NewLife;
using Content.Shared.CCVar;
using Content.Shared.Ghost.Roles;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.Starlight.GhostTheme;
using Linguini.Syntax.Ast;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Content.Shared.Starlight;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using Content.Client.GameTicking.Managers;
using Content.Client.CrewManifest;

namespace Content.Client._Starlight.GhostTheme;

[GenerateTypedNameReferences]
public sealed partial class GhostThemeWindow : DefaultWindow
{
    private readonly IClientPreferencesManager _preferencesManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entManager = default!;

    [Dependency] private readonly IClientConsoleHost _consoleHost = default!;
    [Dependency] private readonly IConfigurationManager _configManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    
    private readonly ClientGameTicker _gameTicker;
    private readonly SpriteSystem _sprites;
    
    public string SelectedTheme = "None";
    
    public event Action<string>? SelectTheme;
    
    public event Action<Color>? SelectColor;
    
    public Color _selectedColor = Color.White;
    
    public HashSet<string> _availableThemes = [];
    private string _searchFilter = "";

    public GhostThemeWindow(IClientPreferencesManager preferencesManager)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _preferencesManager = preferencesManager;
        _sprites = _entitySystem.GetEntitySystem<SpriteSystem>();
        _gameTicker = _entitySystem.GetEntitySystem<ClientGameTicker>();
        
        Search.OnTextChanged += OnSearchEntered;
    
        ReloadGhostThemes();
        RefreshUI();
    }
    
    private void OnSearchEntered(LineEdit.LineEditEventArgs obj)
    {
        _searchFilter = obj.Text.Trim().ToLowerInvariant();
        FilterGhostThemes(_searchFilter);
    }

    private void FilterGhostThemes(string searchText)
    {
        var searchTerms = searchText.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                    .Select(term => term.Trim())
                                    .Where(term => !string.IsNullOrWhiteSpace(term))
                                    .ToList();

        foreach (var child in GhostThemesContainer.Children)
        {
            if (child is GhostPicker ghostPicker)
            {
                var descriptionText = ghostPicker.DescriptionLabel?.Text?.ToLowerInvariant();

                ghostPicker.Visible = searchTerms.Count == 0 || searchTerms.Any(term => descriptionText?.Contains(term) == true);
            }
        }
    }

    public void ReloadGhostThemes()
    {
        GhostThemesContainer.RemoveAllChildren();

        if (!_preferencesManager.ServerDataLoaded)
            return;

        foreach (var ghostTheme in _prototypeManager.EnumeratePrototypes<GhostThemePrototype>())
        {
            string toolTipText = "";
            
            
            if (ghostTheme.Flags != null)
            {
                var flags = ghostTheme.Flags.Select(flag => $"- {flag}").ToList();
                    
                toolTipText = "You need one of these roles on Discord to open this ghost role:\n" + string.Join("\n", flags);
            }
            
            var ghostPicker = new GhostPicker(_sprites,
                ghostTheme.SpriteSpecifier.Sprite,
                ghostTheme.Name,
                !_availableThemes.Contains(ghostTheme.ID));
            GhostThemesContainer.AddChild(ghostPicker);

            if (!_availableThemes.Contains(ghostTheme.ID))
            {
                ghostPicker.ToolTip = toolTipText;
            }
            
            if (ghostTheme.Ckey != null)
                ghostPicker.Visible = _availableThemes.Contains(ghostTheme.ID);

            ghostPicker.OnPressed += args =>
            {
                SelectedTheme = ghostTheme.ID;
                RefreshUI();
            };
        }
    }
    
    public void UpdateThemes(HashSet<string> AvailableThemes)
    {
        _availableThemes = AvailableThemes;
        
        ReloadGhostThemes();
        RefreshUI();
    }
    
    public void RefreshUI()
    {
        GhostThemeDescriptionContainer.RemoveAllChildren();
        
        _selectedColor = Color.White;
        
        if (!_prototypeManager.TryIndex<GhostThemePrototype>(SelectedTheme, out var ghostThemePrototype))
            return;
        
        var ghostDescription = new GhostDescription(_sprites,
                ghostThemePrototype.SpriteSpecifier.Sprite,
                ghostThemePrototype.Name,
                ghostThemePrototype.Description,
                ghostThemePrototype.Colorizeable);
                
        ghostDescription.OnColorSelected += color =>
        {
            _selectedColor = color;
        };
        
        ghostDescription.OnThemeSelected += () =>
        {
            SelectTheme?.Invoke(ghostThemePrototype.ID);
            SelectColor?.Invoke(_selectedColor);
        };
        
        GhostThemeDescriptionContainer.AddChild(ghostDescription);
    }
}
