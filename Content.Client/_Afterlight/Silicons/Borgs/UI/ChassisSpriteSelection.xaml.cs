using Content.Shared._Afterlight.Silicons.Borgs;
using Content.Shared.Silicons.Borgs;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._Afterlight.Silicons.Borgs.UI;

[GenerateTypedNameReferences]
public sealed partial class ChassisSpriteSelection : Control
{
    [Dependency] private readonly IComponentFactory _componentFactory = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    private readonly SpriteSystem _sprite;

    public EntityPrototype? SubtypePrototype;
    public event Action? SubtypeSelected;

    private const int PrototypeViewSize = 2;
    private static readonly ProtoId<EntityCategoryPrototype> _borgSubtypeCategory = "BorgSubtype";

    public ChassisSpriteSelection()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprite = _entityManager.System<SpriteSystem>();
    }

    public void Update(BorgTypePrototype borgTypePrototype)
    {
        MainContainer.Visible = true;

        OptionsContainer.RemoveAllChildren();

        var buttonGroup = new ButtonGroup();
        List<Button> buttons = new();
        buttons.Add(CreateDefaultSubtypeButton(borgTypePrototype, buttonGroup));

        foreach (var ent in _prototype.Categories.GetValueRefOrNullRef(_borgSubtypeCategory))
        {
            if (!ent.TryGetComponent<BorgSubtypeDefinitionComponent>(out var subtype, _componentFactory))
                continue;

            // Only add subtypes of the current selected 'main' borg type (engineering, medical, etc.)
            if (subtype.ParentType != borgTypePrototype.ID)
                continue;

            var button = new Button
            {
                Group = buttonGroup,
                MinHeight = 32,
            };

            var content = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                HorizontalExpand = true,
                VerticalExpand = true
            };

            content.AddChild(CreateTextureRect(subtype.SpritePath ?? new(borgTypePrototype.SpritePath), subtype.SpriteBodyState ?? borgTypePrototype.SpriteBodyState));
            content.AddChild(new Label{ Text = subtype.Price is not null and > 0 ? ent.Name + $" ({subtype.Price}â‚¡)" : ent.Name });
            button.AddChild(content);
            button.OnPressed += _ =>
            {
                SubtypePrototype = ent;
                SubtypeSelected?.Invoke();
            };

            if (borgTypePrototype.DefaultSubtype == ent.ID)
                button.Pressed = true;

            buttons.Add(button);
        }

        foreach (var button in buttons)
        {
            OptionsContainer.AddChild(button);
        }
    }

    private Button CreateDefaultSubtypeButton(BorgTypePrototype borgTypePrototype, ButtonGroup group)
    {
        var button = new Button
        {
            Group = group,
            MinHeight = 32,
        };

        var content = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true,
            VerticalExpand = true
        };

        content.AddChild(CreateTextureRect(new(borgTypePrototype.SpritePath), borgTypePrototype.SpriteBodyState));
        content.AddChild(new Label{ Text = "default" });
        button.AddChild(content);

        button.OnPressed += _ =>
        {
            SubtypePrototype = null;
            SubtypeSelected?.Invoke();
        };

        return button;
    }

    private TextureRect CreateTextureRect(ResPath spritePath, string state)
    {
        var textureRect = new TextureRect()
        {
            Stretch = TextureRect.StretchMode.KeepAspectCentered,
            HorizontalAlignment = HAlignment.Center,
            VerticalAlignment = VAlignment.Center
        };
        textureRect.TextureScale *= PrototypeViewSize;
        textureRect.Texture = _sprite.Frame0(new SpriteSpecifier.Rsi(spritePath, state));

        return textureRect;
    }
}