using System.Linq;
using Content.Client._Starlight.Access.UI; // Starlight-edit
using Content.Shared.Access;
using Content.Shared.Access.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Content.Shared.Access.Components.AccessOverriderComponent;

namespace Content.Client.Access.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AccessOverriderWindow : DefaultWindow
    {
        // Starlight-edit: Start
        private readonly AccessLevelControl _accessButtons = new();
        private readonly AccessGroupControl _accessGroups = new();
        private readonly Dictionary<string, Button> _legacyAccessButtons = new();
        // Starlight-edit: End

        public event Action<List<ProtoId<AccessLevelPrototype>>>? OnSubmit;
        public event Action<ProtoId<AccessGroupPrototype>>? OnGroupSelected; // Starlight-edit

        public AccessOverriderWindow()
        {
            RobustXamlLoader.Load(this);
        }

        // Starlight-edit: Start
        // Populate both groups and levels. currentGroup may be null.
        public void SetAccess(IPrototypeManager protoManager, List<ProtoId<AccessGroupPrototype>> accessGroups, ProtoId<AccessGroupPrototype>? currentGroup, List<ProtoId<AccessLevelPrototype>> accessLevels)
        {
            // Groups
            _accessGroups.Populate(accessGroups, currentGroup ?? accessGroups.FirstOrDefault(), protoManager);
            AccessGroupControlContainer.AddChild(_accessGroups);

            // Levels
            _accessButtons.Populate(accessLevels, protoManager);
            AccessLevelControlContainer.AddChild(_accessButtons);

            foreach (var access in accessLevels)
            {
                if (!protoManager.Resolve(access, out var accessLevel))
                {
                    continue;
                }

            // Wire up group selection -> notify
            foreach (var (id, button) in _accessGroups.ButtonsList)
            {
                button.OnPressed += _ =>
        // Starlight-edit: End
                {
                    OnGroupSelected?.Invoke(id);
                };
            }

            // Wire up level presses -> submit list
            foreach (var (id, button) in _accessButtons.ButtonsList)
            {
                button.OnPressed += _ =>
                {
                    OnSubmit?.Invoke(
                        // Starlight-edit: Start
                        _accessButtons.ButtonsList.Where(x => x.Value.Pressed)
                            .Select(x => new ProtoId<AccessLevelPrototype>(x.Key))
                            .ToList());
                        // Starlight-edit: End
                };
            }
        }

        public void UpdateState(IPrototypeManager protoManager, AccessOverriderBoundUserInterfaceState state)
        {
            PrivilegedIdLabel.Text = state.PrivilegedIdName;
            PrivilegedIdButton.Text = state.IsPrivilegedIdPresent
                ? Loc.GetString("access-overrider-window-eject-button")
                : Loc.GetString("access-overrider-window-insert-button");

            TargetNameLabel.Text = state.TargetLabel;
            TargetNameLabel.FontColorOverride = state.TargetLabelColor;

            MissingPrivilegesLabel.Text = "";
            MissingPrivilegesLabel.FontColorOverride = Color.Yellow;

            MissingPrivilegesText.Text = "";
            MissingPrivilegesText.FontColorOverride = Color.Yellow;

            if (state.MissingPrivilegesList != null && state.MissingPrivilegesList.Any())
            {
                var missingPrivileges = new List<string>();

                foreach (string tag in state.MissingPrivilegesList)
                {
                    var privilege = Loc.GetString(protoManager.Index<AccessLevelPrototype>(tag)?.Name ?? "generic-unknown");
                    missingPrivileges.Add(privilege);
                }

                MissingPrivilegesLabel.Text = Loc.GetString("access-overrider-window-missing-privileges");
                MissingPrivilegesText.Text = string.Join(", ", missingPrivileges);
            }

            var interfaceEnabled = state.IsPrivilegedIdPresent && state.IsPrivilegedIdAuthorized;

            // Starlight-edit: Start
            // Update group control
            if (state.AccessGroups != null)
            {
                _accessGroups.UpdateState(state.CurrentAccessGroup ?? state.AccessGroups.FirstOrDefault());
            }


            // Update levels control
            _accessButtons.UpdateState(state.TargetAccessReaderIdAccessList?.ToList() ??
                                       new List<ProtoId<AccessLevelPrototype>>(),
                                       state.CurrentAccessGroup, // Starlight-edit: influence levels by current group
                                       protoManager, // Starlight-edit
                                       state.AllowedModifyAccessList?.ToList() ??
                                       new List<ProtoId<AccessLevelPrototype>>());

            // Ensure buttons enable/disable
            foreach (var (id, button) in _accessButtons.ButtonsList)
            // Starlight-edit: End
            {
                button.Disabled = !interfaceEnabled;
                if (interfaceEnabled)
                {
                    // Starlight-edit: Start
                    button.Disabled = (!state.AllowedModifyAccessList?.Contains((ProtoId<AccessLevelPrototype>) id)) ?? true;
                }
            }

            // Wire events (ensure not doubly-wired)
            foreach (var (id, button) in _accessGroups.ButtonsList)
            {
                button.OnPressed -= _ => { }; // noop attempt to avoid duplicate subscription (safe)
            }
            foreach (var (id, button) in _accessButtons.ButtonsList)
            {
                button.OnPressed -= _ => { };
            // Starlight-edit: End
            }
        }
    }
}
