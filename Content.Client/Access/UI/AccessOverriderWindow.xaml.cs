using System.Linq;
using Content.Client._Starlight.Access.UI; // Starlight-edit
using Content.Shared.Access;
using Content.Shared.Access.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using static Content.Shared.Access.Components.AccessOverriderComponent;

namespace Content.Client.Access.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AccessOverriderWindow : DefaultWindow
    {
        // Starlight-edit: Start
        private readonly AccessLevelControl _accessButtons = new();
        private readonly AccessGroupControl _accessGroups = new();
        private readonly Dictionary<string, Button> _legacyAccessButtons = new();
        // Starlight-edit: End

        public event Action<List<ProtoId<AccessLevelPrototype>>>? OnSubmit;
        public event Action<ProtoId<AccessGroupPrototype>>? OnGroupSelected; // Starlight-edit

        public AccessOverriderWindow()
        {
            RobustXamlLoader.Load(this);
        }

        // Starlight-edit: Start
        public void SetAccess(IPrototypeManager protoManager, List<ProtoId<AccessGroupPrototype>> accessGroups, ProtoId<AccessGroupPrototype>? currentGroup, List<ProtoId<AccessLevelPrototype>> accessLevels)
        {
            // Clear existing containers
            AccessGroupControlContainer.RemoveAllChildren();
            AccessLevelControlContainer.RemoveAllChildren();

            // Groups
            _accessGroups.Populate(accessGroups, currentGroup ?? accessGroups.FirstOrDefault(), protoManager);
            AccessGroupControlContainer.AddChild(_accessGroups);

            // Levels
            _accessButtons.Populate(accessLevels, protoManager);
            AccessLevelControlContainer.AddChild(_accessButtons);

            // Wire up group selection events
            foreach (var (id, button) in _accessGroups.ButtonsList)
            {
                button.OnPressed += _ => OnGroupSelected?.Invoke(id);
            }

            // Wire up level presses -> submit list
            foreach (var (id, button) in _accessButtons.ButtonsList)
            {
                button.OnPressed += _ =>
                {
                    OnSubmit?.Invoke(
                        _accessButtons.ButtonsList.Where(x => x.Value.Pressed)
                            .Select(x => new ProtoId<AccessLevelPrototype>(x.Key))
                            .ToList());
                    // Starlight-edit: End
                };
            }
        }

        public void UpdateState(IPrototypeManager protoManager, AccessOverriderBoundUserInterfaceState state)
        {
            PrivilegedIdLabel.Text = state.PrivilegedIdName;
            PrivilegedIdButton.Text = state.IsPrivilegedIdPresent
                ? Loc.GetString("access-overrider-window-eject-button")
                : Loc.GetString("access-overrider-window-insert-button");

            TargetNameLabel.Text = state.TargetLabel;
            TargetNameLabel.FontColorOverride = state.TargetLabelColor;

            MissingPrivilegesLabel.Text = "";
            MissingPrivilegesLabel.FontColorOverride = Color.Yellow;

            MissingPrivilegesText.Text = "";
            MissingPrivilegesText.FontColorOverride = Color.Yellow;

            if (state.MissingPrivilegesList != null && state.MissingPrivilegesList.Any())
            {
                var missingPrivileges = new List<string>();
                var unknownCount = 0;

                foreach (string tag in state.MissingPrivilegesList)
                {
                // Starlight edit Start
                    var canDisplay = state.AccessGroups?.Any(group => 
                        protoManager.TryIndex(group, out AccessGroupPrototype? groupProto) && 
                        groupProto.Tags.Contains(tag)) ?? false;

                    if (canDisplay && protoManager.TryIndex<AccessLevelPrototype>(tag, out var accessProto))
                    {
                        var privilege = Loc.GetString(accessProto.Name ?? "generic-unknown");
                        missingPrivileges.Add(privilege);
                    }
                    else
                    {
                        unknownCount++;
                    }
                }
                if (unknownCount > 0)
                {
                    if (unknownCount == 1)
                        missingPrivileges.Add("Unknown");
                    else
                        missingPrivileges.Add($"Unknown ({unknownCount})");
                }
                if (missingPrivileges.Any())
                {
                    MissingPrivilegesLabel.Text = Loc.GetString("access-overrider-window-missing-privileges");
                    MissingPrivilegesText.Text = string.Join(", ", missingPrivileges);
                }
                // Starlight edit End
            }

            var interfaceEnabled = state.IsPrivilegedIdPresent && state.IsPrivilegedIdAuthorized;

            // Starlight edit Start
            var availableAccess = state.AvailableAccessLevels?.ToList() ?? new List<ProtoId<AccessLevelPrototype>>();
            var pressedAccess = state.PressedAccessLevels?.ToList() ?? new List<ProtoId<AccessLevelPrototype>>();

            var groupsWithCoverage = new List<ProtoId<AccessGroupPrototype>>();
            if (availableAccess.Count > 0 && state.AccessGroups != null)
            {
                foreach (var g in state.AccessGroups)
                {
                    if (!protoManager.TryIndex(g, out AccessGroupPrototype? gp))
                        continue;

                    var groupTags = gp.Tags.Where(tag =>
                        protoManager.TryIndex<AccessLevelPrototype>(tag, out var accessProto) &&
                        accessProto.CanAddToIdCard && availableAccess.Contains(tag)).ToList();

                    if (groupTags.Count == 0)
                        continue;

                    var matchingTags = groupTags.Count;
                    var threshold = Math.Max(1, Math.Min(3, groupTags.Count / 2));

                    if (matchingTags >= threshold)
                        groupsWithCoverage.Add(gp.ID);
                }
            }

            var showGroups = groupsWithCoverage.Count > 0;

            AccessGroupControlContainer.RemoveAllChildren();
            AccessLevelControlContainer.RemoveAllChildren();

            if (showGroups)
            {
                ProtoId<AccessGroupPrototype> selectedGroup =
                    state.CurrentAccessGroup.HasValue && groupsWithCoverage.Contains(state.CurrentAccessGroup.Value)
                        ? state.CurrentAccessGroup.Value
                        : groupsWithCoverage.First();

                _accessGroups.Populate(groupsWithCoverage, selectedGroup, protoManager);
                AccessGroupControlContainer.Visible = true;
                AccessGroupControlContainer.AddChild(_accessGroups);

                foreach (var (id, button) in _accessGroups.ButtonsList)
                    button.OnPressed += _ => OnGroupSelected?.Invoke(id);
            }
            else
            {
                AccessGroupControlContainer.Visible = false;
            }

            ProtoId<AccessGroupPrototype>? effectiveGroup =
                showGroups ? state.CurrentAccessGroup : null;

            _accessButtons.UpdateState(
                pressedAccess,
                effectiveGroup,
                protoManager,
                availableAccess);
            AccessLevelControlContainer.AddChild(_accessButtons);

            foreach (var (id, button) in _accessButtons.ButtonsList)
            {
                button.OnPressed += _ => OnSubmit?.Invoke(
                    _accessButtons.ButtonsList.Where(x => x.Value.Pressed)
                        .Select(x => new ProtoId<AccessLevelPrototype>(x.Key))
                        .ToList());
            // Starlight-edit: End
            }
        }
    }
}
