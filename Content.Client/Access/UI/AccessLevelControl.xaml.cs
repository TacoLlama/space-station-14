using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared.Access;
using Content.Shared.Access.Systems;

namespace Content.Client.Access.UI;

[GenerateTypedNameReferences]
public sealed partial class AccessLevelControl : GridContainer
{
    [Dependency] private readonly ILogManager _logManager = default!;

    private ISawmill _sawmill = default!;

    public readonly Dictionary<ProtoId<AccessLevelPrototype>, Button> ButtonsList = new();

    public AccessLevelControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sawmill = _logManager.GetSawmill("accesslevelcontrol");
    }

    public void Populate(List<ProtoId<AccessLevelPrototype>> accessLevels, IPrototypeManager prototypeManager)
    {
        // Starlight-edit: Start
        RemoveAllChildren();
        ButtonsList.Clear();

        if (accessLevels.Count == 0)
            return;
        // Starlight-edit: End
        foreach (var access in accessLevels)
        {
            if (!prototypeManager.TryIndex(access, out var accessLevel))
            {
                _sawmill.Error($"Unable to find accesslevel for {access}");
                continue;
            }

            var newButton = new Button
            {
                Text = accessLevel.GetAccessLevelName(),
                ToggleMode = true,
            };
            AddChild(newButton);
            ButtonsList.Add(accessLevel.ID, newButton);
        }
    }
    // Starlight-edit: Start
    public void UpdateState(
        List<ProtoId<AccessLevelPrototype>> pressedList,
        ProtoId<AccessGroupPrototype>? currentGroup,
        IPrototypeManager? prototypeManager = null,
        List<ProtoId<AccessLevelPrototype>>? enabledList = null)
    {
        if (enabledList == null || enabledList.Count == 0)
        {
            RemoveAllChildren();
            ButtonsList.Clear();
            return;
        }

        if (prototypeManager == null)
        {
            RemoveAllChildren();
            ButtonsList.Clear();
            return;
        }

        RemoveAllChildren();
        ButtonsList.Clear();

        List<ProtoId<AccessLevelPrototype>> accessesToShow;

        if (currentGroup != null && prototypeManager.TryIndex(currentGroup.Value, out var group))
        {
            accessesToShow = group.Tags.Where(tag => enabledList.Contains(tag)).ToList();
        }
        else
        {
            accessesToShow = enabledList;
        }

        Populate(accessesToShow, prototypeManager);
        // Starlight-edit: End

        foreach (var (accessName, button) in ButtonsList)
        {
            button.Pressed = pressedList.Contains(accessName);
            button.Disabled = false; // Starlight
        }
    }
}
