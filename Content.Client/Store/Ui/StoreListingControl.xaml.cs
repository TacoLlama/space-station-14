using Content.Client.GameTicking.Managers;
using Content.Shared.Store;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client.Store.Ui;

[GenerateTypedNameReferences]
public sealed partial class StoreListingControl : Control
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    private readonly ClientGameTicker _ticker;

    private readonly ListingDataWithCostModifiers _data;

    private readonly bool _hasBalance;
    private readonly string _price;
    private readonly string _discount;
    public StoreListingControl(ListingDataWithCostModifiers data, string price, string discount, bool hasBalance, Texture? texture = null)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _ticker = _entity.System<ClientGameTicker>();

        _data = data;
        _hasBalance = hasBalance;
        _price = price;
        _discount = discount;

        StoreItemName.Text = ListingLocalisationHelpers.GetLocalisedNameOrEntityName(_data, _prototype);
        StoreItemDescription.SetMessage(ListingLocalisationHelpers.GetLocalisedDescriptionOrEntityDescription(_data, _prototype));

        UpdateBuyButtonText();
        StoreItemBuyButton.Disabled = !CanBuy();

        StoreItemTexture.Texture = texture;
    }

    private bool CanBuy()
    {
        if (!_hasBalance)
            return false;

        var stationTime = _timing.CurTime.Subtract(_ticker.RoundStartTimeSpan);
        if (_data.RestockTime > stationTime)
            return false;

        // Starlight: Check if the listing is marked as unavailable (e.g., when a rift is active or out of stock)
        if (_data.Unavailable)
            return false;
        // Starlight End

        return true;
    }

    private void UpdateBuyButtonText()
    {
        var stationTime = _timing.CurTime.Subtract(_ticker.RoundStartTimeSpan);
        if (_data.RestockTime > stationTime)
        {
            var timeLeftToBuy = stationTime - _data.RestockTime;
            StoreItemBuyButton.Text =  timeLeftToBuy.Duration().ToString(@"mm\:ss");
        }
        else
        {
            DiscountSubText.Text = _discount;
            StoreItemBuyButton.Text = _price;
        }
    }

    // Starlight
    private void UpdateNameAndDescription()
    {
        // Get the localized name, which will already include stock count or "Out of Stock" text
        var name = ListingLocalisationHelpers.GetLocalisedNameOrEntityName(_data, _prototype);
        StoreItemName.Text = name;

        // Get the localized description, which will include the last purchaser information
        var description = ListingLocalisationHelpers.GetLocalisedDescriptionOrEntityDescription(_data, _prototype);
        StoreItemDescription.SetMessage(description);
    }
    // Starlight End
    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateBuyButtonText();
        UpdateNameAndDescription(); // Starlight
        StoreItemBuyButton.Disabled = !CanBuy();
    }
}
