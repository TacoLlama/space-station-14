using System.Globalization;
using Content.Client.UserInterface.Controls;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
// Starlight Start
using System;
using System.Collections.Generic;
using System.Linq;
using Robust.Client.UserInterface.Controls;
// Starlight End

namespace Content.Client.Communications.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CommunicationsConsoleMenu : FancyWindow
    {
        [Dependency] private readonly IConfigurationManager _cfg = default!;
        [Dependency] private readonly IGameTiming _timing = default!;
        [Dependency] private readonly ILocalizationManager _loc = default!;

        public bool CanAnnounce;
        public bool CanBroadcast;
        public bool CanCall;
        public bool AlertLevelSelectable;
        public bool CountdownStarted;
        public string CurrentLevel = string.Empty;
        public TimeSpan? CountdownEnd;

        public event Action? OnEmergencyLevel;
        public event Action<string>? OnAlertLevel;
        public event Action<string>? OnAnnounce;
        public event Action<string>? OnBroadcast;
        // Starlight Start
        public bool ShuttleCallsAllowed = true;
        public TimeSpan? AnnouncementCountdownEnd;
        public TimeSpan? BroadcastCountdownEnd;
        public TimeSpan? ShuttleCountdownEnd;
        public TimeSpan? RecallCountdownEnd;
        private TimeSpan? AlertLevelCooldownEnd;
        private float LastAlertLevelDelay = 0;
        private TimeSpan? LastCountdownStart = null;
        // Starlight End

        public CommunicationsConsoleMenu()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            MessageInput.Placeholder = new Rope.Leaf(_loc.GetString("comms-console-menu-announcement-placeholder"));

            var maxAnnounceLength = _cfg.GetCVar(CCVars.ChatMaxAnnouncementLength);
            MessageInput.OnTextChanged += (args) =>
            {
                if (args.Control.TextLength > maxAnnounceLength)
                {
                    AnnounceButton.Disabled = true;
                    AnnounceButton.ToolTip = Loc.GetString("comms-console-message-too-long");
                }
                else
                {
                    AnnounceButton.Disabled = !CanAnnounce;
                    AnnounceButton.ToolTip = null;

                }
            };

            AnnounceButton.OnPressed += _ => OnAnnounce?.Invoke(Rope.Collapse(MessageInput.TextRope));
            AnnounceButton.Disabled = !CanAnnounce;

            BroadcastButton.OnPressed += _ => OnBroadcast?.Invoke(Rope.Collapse(MessageInput.TextRope));
            BroadcastButton.Disabled = !CanBroadcast;

            AlertLevelButton.OnItemSelected += args =>
            {
                var metadata = AlertLevelButton.GetItemMetadata(args.Id);
                if (metadata != null && metadata is string cast)
                {
                    OnAlertLevel?.Invoke(cast);
                }
            };


            AlertLevelButton.Disabled = !AlertLevelSelectable;

            EmergencyShuttleButton.OnPressed += _ => OnEmergencyLevel?.Invoke();
            EmergencyShuttleButton.Disabled = !CanCall;

            // Starlight Start
            SetLabelMessage(CountdownLabel, null);
            SetLabelMessage(AnnouncementCooldownLabel, null);
            // Starlight End
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);
            UpdateCountdown();
        }

        // The current alert could make levels unselectable, so we need to ensure that the UI reacts properly.
        // If the current alert is unselectable, the only item in the alerts list will be
        // the current alert. Otherwise, it will be the list of alerts, with the current alert
        // selected.
        public void UpdateAlertLevels(List<string>? alerts, string currentAlert)
        {
            // Starlight Start
            if (AlertLevelCooldownEnd.HasValue)
                return;
            // Starlight End
            AlertLevelButton.Clear();

            if (alerts == null || !alerts.Any()) // Starlight edit
            {
                var name = currentAlert;
                if (_loc.TryGetString($"alert-level-{currentAlert}", out var locName))
                {
                    name = locName;
                }
                AlertLevelButton.AddItem(name);
                AlertLevelButton.SetItemMetadata(AlertLevelButton.ItemCount - 1, currentAlert);
                // Starlight Start
                AlertLevelButton.Select(0);
                return;
            }

            for (int i = 0; i < alerts.Count; i++)
            {
                var alert = alerts[i];
                var name = alert;
                if (_loc.TryGetString($"alert-level-{alert}", out var locName))
                    name = locName;
                AlertLevelButton.AddItem(name);
                AlertLevelButton.SetItemMetadata(AlertLevelButton.ItemCount - 1, alert);
                if (alert == currentAlert)
                    AlertLevelButton.Select(AlertLevelButton.ItemCount - 1);
            }
        }

        private void SetLabelMessage(RichTextLabel? label, string? message)
        {
            if (label == null)
                return;

            if (string.IsNullOrEmpty(message))
            {
                label.Visible = false;
                label.SetMessage(string.Empty);
            }
            else
            {
                label.Visible = true;
                label.SetMessage(message);
            }
        }

        public void UpdateAlertLevelCooldownFromState(float currentAlertDelay)
        {
            if (currentAlertDelay > 0)
            {
                AlertLevelCooldownEnd = _timing.CurTime + TimeSpan.FromSeconds(currentAlertDelay);
                LastAlertLevelDelay = currentAlertDelay;
            }
            else
            {
                AlertLevelCooldownEnd = null;
                LastAlertLevelDelay = 0;
            }
        }

        public void SetLastCountdownStart(TimeSpan? lastCountdownStart)
        {
            LastCountdownStart = lastCountdownStart;
        }

        public void UpdateCountdown()
        {
            // ---------------------------
            // Announcement cooldown display
            // ---------------------------
            if (AnnouncementCountdownEnd.HasValue)
            {
                var announceDiff = AnnouncementCountdownEnd.Value - _timing.CurTime;
                if (announceDiff <= TimeSpan.Zero)
                {
                    AnnouncementCountdownEnd = null;
                    AnnounceButton.Text = _loc.GetString("comms-console-menu-announcement-button");
                    AnnounceButton.Disabled = !CanAnnounce;
                    SetLabelMessage(AnnouncementCooldownLabel, null);
                }
                else
                {
                    var baseAnnounceText = _loc.GetString("comms-console-menu-announcement-button");
                    AnnounceButton.Text = $"{baseAnnounceText} ({FormatShortTime(announceDiff)})";
                    AnnounceButton.Disabled = true;
                    SetLabelMessage(AnnouncementCooldownLabel, null);
                }
            }
            else
            {
                AnnounceButton.Text = _loc.GetString("comms-console-menu-announcement-button");
                AnnounceButton.Disabled = !CanAnnounce;
                SetLabelMessage(AnnouncementCooldownLabel, null);
            }

            // ---------------------------
            // Alert level cooldown display
            // ---------------------------
            if (AlertLevelCooldownEnd.HasValue)
            {
                var diff = AlertLevelCooldownEnd.Value - _timing.CurTime;
                if (diff <= TimeSpan.Zero)
                {
                    AlertLevelCooldownEnd = null;
                    UpdateAlertLevels(null, CurrentLevel);
                    AlertLevelButton.Disabled = !AlertLevelSelectable;
                    AlertLevelButton.ToolTip = _loc.GetString("comms-console-menu-alert-level-button-tooltip");
                }
                else
                {
                    var levelText = _loc.TryGetString($"alert-level-{CurrentLevel}", out var locName)
                        ? locName
                        : CurrentLevel;
                    var formatted = FormatShortTime(diff);
                    AlertLevelButton.Clear();
                    AlertLevelButton.AddItem($"{levelText} ({formatted})");
                    AlertLevelButton.Select(0);
                    AlertLevelButton.Disabled = true;
                    AlertLevelButton.ToolTip = _loc.GetString("comms-console-menu-alert-level-button-tooltip");
                }
            // Starlight End
            }
            else
            {
                // Starlight edit Start
                AlertLevelButton.Disabled = !AlertLevelSelectable;
                AlertLevelButton.ToolTip = _loc.GetString("comms-console-menu-alert-level-button-tooltip");
            }

            // ---------------------
            // Shuttle / Call/Recall
            // ---------------------
            var actualShuttleEnd = ShuttleCountdownEnd ?? CountdownEnd;
            var inbound = CountdownStarted && actualShuttleEnd.HasValue;
            var baseCallText = inbound ? _loc.GetString("comms-console-menu-recall-shuttle") : _loc.GetString("comms-console-menu-call-shuttle");

            bool recallPastTurningPoint = false;
            float turningPoint = _cfg.IsCVarRegistered("shuttle.recall_turning_point")
                ? _cfg.GetCVar(CCVars.EmergencyRecallTurningPoint)
                : 0.5f;

            if (inbound && actualShuttleEnd.HasValue && CountdownStarted && CountdownEnd.HasValue && LastCountdownStart.HasValue)
            {
                var total = CountdownEnd.Value - LastCountdownStart.Value;
                var elapsed = _timing.CurTime - LastCountdownStart.Value;
                if (total.TotalSeconds > 0)
                {
                    var frac = elapsed.TotalSeconds / total.TotalSeconds;
                    recallPastTurningPoint = frac >= turningPoint;
                }
            }

            var isDisabledByServer = !CanCall || !ShuttleCallsAllowed;
            if ((isDisabledByServer && !RecallCountdownEnd.HasValue) || (inbound && recallPastTurningPoint))
            {
                EmergencyShuttleButton.Text = $"{baseCallText} (disabled)";
                EmergencyShuttleButton.Disabled = true;

                if (inbound)
                {
                    var diff = actualShuttleEnd!.Value - _timing.CurTime;
                    if (diff < TimeSpan.Zero)
                        diff = TimeSpan.Zero;
                    SetLabelMessage(CountdownLabel, _loc.GetString("comms-console-menu-time-remaining", ("time", FormatShortTime(diff))));
                }
                else
                {
                    SetLabelMessage(CountdownLabel, null);
                }

                return;
            }

            if (RecallCountdownEnd.HasValue)
            {
                var recallDiff = RecallCountdownEnd.Value - _timing.CurTime;
                if (recallDiff <= TimeSpan.Zero)
                {
                    RecallCountdownEnd = null;
                    UpdateCountdown();
                    return;
                }
                else
                {
                    EmergencyShuttleButton.Text = $"{baseCallText} ({FormatShortTime(recallDiff)})";
                    EmergencyShuttleButton.Disabled = true;

                    if (inbound)
                    {
                        var diff = actualShuttleEnd!.Value - _timing.CurTime;
                        if (diff < TimeSpan.Zero)
                            diff = TimeSpan.Zero;
                        SetLabelMessage(CountdownLabel, _loc.GetString("comms-console-menu-time-remaining", ("time", FormatShortTime(diff))));
                    }
                    else
                    {
                        SetLabelMessage(CountdownLabel, null);
                    }

                    return;
                }
            }
            if (inbound)
            {
                var diff = actualShuttleEnd!.Value - _timing.CurTime;
                if (diff < TimeSpan.Zero)
                    diff = TimeSpan.Zero;

                SetLabelMessage(CountdownLabel, _loc.GetString("comms-console-menu-time-remaining", ("time", FormatShortTime(diff))));
                EmergencyShuttleButton.Text = baseCallText;
                EmergencyShuttleButton.Disabled = !CanCall || !ShuttleCallsAllowed;
                return;
            }

            SetLabelMessage(CountdownLabel, null);
            EmergencyShuttleButton.Text = _loc.GetString("comms-console-menu-call-shuttle");
            EmergencyShuttleButton.Disabled = !CanCall || !ShuttleCallsAllowed;
        }
        private static string FormatShortTime(TimeSpan time)
        {
            if (time.TotalMinutes >= 1)
                return $"{(int)time.TotalMinutes}:{time.Seconds:D2}";
            else
                return $"{time.Seconds}";
        // Starlight edit End
        }
    }
}
